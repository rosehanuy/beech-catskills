buffer=20,
check.size=FALSE)
write.csv(veg_filtered,'neon_trees_BART.csv')
library(ggplot2)
library(neonUtilities)
library(neonOS)
library(geoNEON)
library(magrittr)
library(dplyr)
library(lubridate)
library(here)
here::i_am('neon.Rmd')
options(stringsAsFactors=F)
knitr::opts_chunk$set(echo = TRUE)
sitename = "BART"
year = "2019"
veg_filtered = read.csv(here(sitename, paste0('neon_trees_',sitename,'.csv')))
# chm data
byTileAOP(dpID="DP3.30015.001", site=sitename,
year=year, easting=veg_filtered$easting_tree,
northing=veg_filtered$northing_tree,
buffer=20,
check.size=FALSE)
dir_tree()
?dir_tree
install.packages('fs')
library(fs)
library(ggplot2)
library(neonUtilities)
library(neonOS)
library(geoNEON)
library(magrittr)
library(dplyr)
library(lubridate)
library(fs)
library(here)
here::i_am('neon.Rmd')
options(stringsAsFactors=F)
knitr::opts_chunk$set(echo = TRUE)
dt <- dir_tree()
dt
dt <- dir_tree()
chm_files <- dt[grepl("*_CHM.tif", dt)]
file_move(chm_files, "CHM")
#dt <- dir_tree()
chm_files <- dt[grepl("*_CHM.tif", dt)]
file_move(chm_files, "CHM")
install.packages("lidR")
library(lidR)
library(ggplot2)
library(neonUtilities)
library(neonOS)
library(geoNEON)
library(magrittr)
library(dplyr)
library(lubridate)
library(fs)
library(here)
library(lidR)
here::i_am('neon.Rmd')
options(stringsAsFactors=F)
knitr::opts_chunk$set(echo = TRUE)
get_ttops <- function() {
all_chm <- list.files("CHM", full.names=TRUE)
frames <- vector(mode="list", length=length(all_chm))
for (i in 1:length(all_chm)) {
chm <- raster(all_chm[i])
ttops <- locate_trees(chm, lmf(ws=opt$windowsize, shape='circular'),  uniqueness = "bitmerge")
frames[[i]] <- ttops
}
return(bind_rows(frames))
}
all_ttops <- get_ttops()
install.packages(raster)
install.packages('raster')
library(raster)
library(ggplot2)
library(neonUtilities)
library(neonOS)
library(geoNEON)
library(magrittr)
library(dplyr)
library(lubridate)
library(fs)
library(here)
library(lidR)
library(raster)
here::i_am('neon.Rmd')
options(stringsAsFactors=F)
knitr::opts_chunk$set(echo = TRUE)
get_ttops <- function() {
all_chm <- list.files("CHM", full.names=TRUE)
frames <- vector(mode="list", length=length(all_chm))
for (i in 1:length(all_chm)) {
chm <- raster(all_chm[i])
ttops <- locate_trees(chm, lmf(ws=opt$windowsize, shape='circular'),  uniqueness = "bitmerge")
frames[[i]] <- ttops
}
return(bind_rows(frames))
}
all_ttops <- get_ttops()
get_ttops <- function() {
all_chm <- list.files("CHM", full.names=TRUE)
frames <- vector(mode="list", length=length(all_chm))
for (i in 1:length(all_chm)) {
chm <- raster(all_chm[i])
ttops <- locate_trees(chm, lmf(ws=4, shape='circular'),  uniqueness = "bitmerge")
frames[[i]] <- ttops
}
return(bind_rows(frames))
}
all_ttops <- get_ttops()
st_write(all_ttops, paste(opt$sitename, here('output', sitename,"tree_tops_BART.gpkg", sep="_")))
library(sf)
library(ggplot2)
library(neonUtilities)
library(neonOS)
library(geoNEON)
library(magrittr)
library(dplyr)
library(lubridate)
library(fs)
library(here)
library(lidR)
library(raster)
library(sf)
here::i_am('neon.Rmd')
options(stringsAsFactors=F)
knitr::opts_chunk$set(echo = TRUE)
#all_ttops <- get_ttops()
st_write(all_ttops, paste(opt$sitename, here('output', sitename,"tree_tops_BART.gpkg", sep="_")))
#all_ttops <- get_ttops()
st_write(all_ttops, here('output', sitename,paste0("tree_tops_",sitename,".gpkg")))
plot(all_ttops.geometry)
View(all_ttops)
sf::plot(st_geometry(all_ttops))
plot(sf::st_geometry(all_ttops))
plot(sf::st_geometry(all_ttops[1,]))
plot(sf::st_geometry(all_ttops[1:10,]))
plot(sf::st_geometry(all_ttops[1:50,]))
chm_1 <- raster(chm_files[1])
chm_files <- dt[grepl("*_CHM.tif", dt)]
dt <- dir_tree()
chm_files <- dt[grepl("*_CHM.tif", dt)]
chm_files[1]
chm_1 <- raster(here(chm_files[1]))
chm_1
plot(chm_1)
plot(sf::st_geometry(all_ttops[1:5,]),add=TRUE)
plot(chm_1)
plot(sf::st_geometry(all_ttops[1:20,]),add=TRUE)
plot(chm_1)
plot(sf::st_geometry(all_ttops[1:100,]),add=TRUE)
plot(chm_1)
plot(sf::st_geometry(all_ttops[1:10000,]),add=TRUE)
View(veg_filtered)
get_chm_dif <- function(veg_filtered){
all_chm <- list.files("CHM", full.names=TRUE)
frames <- vector(mode="list", length=length(all_chm))
for (i in 1:length(all_chm)) {
chm <- raster(all_chm[i])
vegsub <- veg_filtered[which(veg_filtered$easting_tree >= extent(chm)[1] &
veg_filtered$easting_tree <= extent(chm)[2] &
veg_filtered$northing_tree >= extent(chm)[3] &
veg_filtered$northing_tree <= extent(chm)[4]),]
if (nrow(vegsub)>0){
vegsub$chm_height <- extract(chm,
cbind(vegsub$easting_tree,
vegsub$northing_tree),
buffer=vegsub$adjCoordinateUncertainty,
fun=max)
vegsub$chm_dif <- abs(vegsub$chm_height-vegsub$height)
frames[[i]] <- vegsub
}
}
return(bind_rows(frames))
}
veg_filtered <- get_chm_dif(veg_filtered)
View(veg_filtered)
write.csv(veg_filtered,here('output',sitename,paste0('neon_trees_',sitename,'.csv')))
sitename = "HARV"
year = "2019"
veg_filtered = read.csv(here(sitename, paste0('neon_trees_',sitename,'.csv')))
sitename = "HARV"
year = "2019"
veg_filtered = read.csv(here('output', sitename, paste0('neon_trees_',sitename,'.csv')))
# chm data
byTileAOP(dpID="DP3.30015.001", site=sitename,
year=year, easting=veg_filtered$easting_tree,
northing=veg_filtered$northing_tree,
buffer=20,
check.size=FALSE)
dt <- dir_tree()
chm_files <- dt[grepl("*_CHM.tif", dt)]
file_move(chm_files, "CHM")
all_chm <- list.files("CHM", full.names=TRUE)
all_chm[grepl("*HARV*",all_chm)]
all_chm[grepl(paste0('*',sitename,'*'))]
all_chm[grepl(paste0('*',sitename,'*')),all_chm]
all_chm[grepl(paste0('*',sitename,'*'),all_chm)]
get_chm_dif <- function(veg_filtered){
all_chm <- list.files("CHM", full.names=TRUE)
all_chm <- all_chm[grepl(paste0('*',sitename,'*'),all_chm)]
frames <- vector(mode="list", length=length(all_chm))
for (i in 1:length(all_chm)) {
chm <- raster(all_chm[i])
vegsub <- veg_filtered[which(veg_filtered$easting_tree >= extent(chm)[1] &
veg_filtered$easting_tree <= extent(chm)[2] &
veg_filtered$northing_tree >= extent(chm)[3] &
veg_filtered$northing_tree <= extent(chm)[4]),]
if (nrow(vegsub)>0){
vegsub$chm_height <- extract(chm,
cbind(vegsub$easting_tree,
vegsub$northing_tree),
buffer=vegsub$adjCoordinateUncertainty,
fun=max)
vegsub$chm_dif <- abs(vegsub$chm_height-vegsub$height)
frames[[i]] <- vegsub
}
}
return(bind_rows(frames))
}
get_ttops <- function() {
all_chm <- list.files("CHM", full.names=TRUE)
all_chm <- all_chm[grepl(paste0('*',sitename,'*'),all_chm)]
frames <- vector(mode="list", length=length(all_chm))
for (i in 1:length(all_chm)) {
chm <- raster(all_chm[i])
ttops <- locate_trees(chm, lmf(ws=4, shape='circular'),  uniqueness = "bitmerge")
frames[[i]] <- ttops
}
return(bind_rows(frames))
}
all_ttops <- get_ttops()
st_write(all_ttops, here('output', sitename,paste0("tree_tops_",sitename,".gpkg")))
get_chm_dif <- function(veg_filtered){
all_chm <- list.files("CHM", full.names=TRUE)
all_chm <- all_chm[grepl(paste0('*',sitename,'*'),all_chm)]
frames <- vector(mode="list", length=length(all_chm))
for (i in 1:length(all_chm)) {
chm <- raster(all_chm[i])
vegsub <- veg_filtered[which(veg_filtered$easting_tree >= extent(chm)[1] &
veg_filtered$easting_tree <= extent(chm)[2] &
veg_filtered$northing_tree >= extent(chm)[3] &
veg_filtered$northing_tree <= extent(chm)[4]),]
if (nrow(vegsub)>0){
vegsub$chm_height <- extract(chm,
cbind(vegsub$easting_tree,
vegsub$northing_tree),
buffer=vegsub$adjCoordinateUncertainty,
fun=max)
vegsub$chm_dif <- abs(vegsub$chm_height-vegsub$height)
frames[[i]] <- vegsub
}
}
return(bind_rows(frames))
}
veg_filtered <- get_chm_dif(veg_filtered)
write.csv(veg_filtered,here('output',sitename,paste0('neon_trees_',sitename,'.csv')))
library(here)
here::i_am('jm_distance.Rmd')
separability.measures <- function ( Vector.1 , Vector.2 ) {
# convert vectors to matrices in case they are not
Matrix.1 <- as.matrix (Vector.1)
Matrix.2 <- as.matrix (Vector.2)
# define means
mean.Matrix.1 <- mean ( Matrix.1 )
mean.Matrix.2 <- mean ( Matrix.2 )
# define difference of means
mean.difference <- mean.Matrix.1 - mean.Matrix.2
# define covariances for supplied matrices
cv.Matrix.1 <- cov ( Matrix.1 )
cv.Matrix.2 <- cov ( Matrix.2 )
# define the halfsum of cv's as "p"
p <- ( cv.Matrix.1 + cv.Matrix.2 ) / 2
# calculate the Bhattacharryya index
bh.distance <- 0.125 *t ( mean.difference ) * p^ ( -1 ) * mean.difference +
0.5 * log (det ( p ) / sqrt (det ( cv.Matrix.1 ) * det ( cv.Matrix.2 )
)
)
# calculate Jeffries-Matusita
# following formula is bound between 0 and 2.0
jm.distance <- 2 * ( 1 - exp ( -bh.distance ) )
# calculate the divergence
# trace (is the sum of the diagonal elements) of a square matrix
trace.of.matrix <- function ( SquareMatrix ) {
sum ( diag ( SquareMatrix ) ) }
# term 1
divergence.term.1 <- 1/2 * trace.of.matrix (( cv.Matrix.1 - cv.Matrix.2 ) *
( cv.Matrix.2^ (-1) - cv.Matrix.1^ (-1) )
)
# term 2
divergence.term.2 <- 1/2 * trace.of.matrix (( cv.Matrix.1^ (-1) + cv.Matrix.2^ (-1) ) *
( mean.Matrix.1 - mean.Matrix.2 ) *
t ( mean.Matrix.1 - mean.Matrix.2 )
)
# divergence
divergence <- divergence.term.1 + divergence.term.2
# and the transformed divergence
transformed.divergence  <- 2 * ( 1 - exp ( - ( divergence / 8 ) ) )
indices <- data.frame(
jm=jm.distance,bh=bh.distance,div=divergence,tdiv=transformed.divergence)
return(indices)
}
beech <- read.csv(here('output','beech_sentinel_pixels.csv'))
nonbeech <- read.csv(here('output','nonbeech_sentinel_pixels.csv'))
View(beech)
sep_measures_df <- data.frame()
for (i in 2:341){
beech_vec <-  beech[,i]
non_beech_vec <- nonbeech[,i]
m <- separability.measures(beech_vec,non_beech_vec)
t <- names(beech)[i]
m <- cbind(m,t)
sep_measures_df <- rbind(sep_measures_df,m)
}
len <- ncol(beech)
sep_measures_df <- data.frame()
len <- ncol(beech)
for (i in 2:len){
beech_vec <-  beech[,i]
non_beech_vec <- nonbeech[,i]
m <- separability.measures(beech_vec,non_beech_vec)
t <- names(beech)[i]
m <- cbind(m,t)
sep_measures_df <- rbind(sep_measures_df,m)
}
View(sep_measures_df)
# drop na rows
df <- sep_measures_df[complete.cases(sep_measures_df),]
write.csv(df,here('output','sentinel_indices_sep_measures.csv'))
library(ggplot2)
library(neonUtilities)
library(neonOS)
library(geoNEON)
library(magrittr)
library(dplyr)
library(lubridate)
library(fs)
library(here)
library(lidR)
library(raster)
library(sf)
here::i_am('neon.Rmd')
options(stringsAsFactors=F)
knitr::opts_chunk$set(echo = TRUE)
# vegetation survey
vst <- loadByProduct(dpID="DP1.10098.001",
site="BART",
check.size=F)
# get tree locations
vst.loc <- getLocTOS(data=vst$vst_mappingandtagging,
dataProd="vst_mappingandtagging")
View(vst)
library(ggplot2)
library(neonUtilities)
library(neonOS)
library(geoNEON)
library(magrittr)
library(dplyr)
library(lubridate)
library(fs)
library(here)
library(lidR)
library(raster)
library(sf)
here::i_am('neon.Rmd')
options(stringsAsFactors=F)
knitr::opts_chunk$set(echo = TRUE)
sitename <- 'BART'
year <- '2019'
veg_filtered <- read.csv(here('output',sitename,paste0('neon_trees_',sitename,'.csv')))
byTileAOP(dpID="DP3.30010.001", site=sitename,
year=year, easting=veg_filtered$easting_tree,
northing=veg_filtered$northing_tree,
buffer=20,
check.size=FALSE)
View(veg_filtered)
library(ggplot2)
library(neonUtilities)
library(neonOS)
library(geoNEON)
library(magrittr)
library(dplyr)
library(lubridate)
library(fs)
library(here)
library(lidR)
library(raster)
library(sf)
here::i_am('neon.Rmd')
options(stringsAsFactors=F)
knitr::opts_chunk$set(echo = TRUE)
pp <- loadByProduct(dpID="DP1.10058.001",
site="BART",
check.size=F)
# get plot locations
pp.loc <- getLocTOS(data=pp$div_1m2Data,
dataProd="div_1m2Data")
View(pp)
View(pp.loc)
pp.beech <- pp.loc %>% filter(grepl("FAGR", taxonID))
View(pp.beech)
nunique(pp.beech$subplotID)
unique(pp.beech$subplotID)
unique(pp.loc$subplotID)
library(ggplot2)
library(neonUtilities)
library(neonOS)
library(geoNEON)
library(magrittr)
library(dplyr)
library(lubridate)
library(fs)
library(here)
library(lidR)
library(raster)
library(sf)
here::i_am('neon.Rmd')
options(stringsAsFactors=F)
knitr::opts_chunk$set(echo = TRUE)
# vegetation survey
vst <- loadByProduct(dpID="DP1.10098.001",
site="BART",
check.size=F)
# get tree locations
vst.loc <- getLocTOS(data=vst$vst_mappingandtagging,
dataProd="vst_mappingandtagging")
# join tree locations to veg survey tree table
veg <- joinTableNEON(vst$vst_apparentindividual,
vst.loc,
name1="vst_apparentindividual",
name2="vst_mappingandtagging")
# get plot locations
plot_locs <- vst$vst_perplotperyear %>%
select(plotID, easting, northing) %>%
rename("easting_plot"=easting, "northing_plot"=northing) %>%
group_by(plotID) %>%
slice_head(n=1) %>%
ungroup()
??select
?select
plot_locs <- vst$vst_perplotperyear %>%
dpylr::select(plotID, easting, northing) %>%
rename("easting_plot"=easting, "northing_plot"=northing) %>%
group_by(plotID) %>%
slice_head(n=1) %>%
ungroup()
plot_locs <- vst$vst_perplotperyear %>%
dplyr::select(plotID, easting, northing) %>%
rename("easting_plot"=easting, "northing_plot"=northing) %>%
group_by(plotID) %>%
slice_head(n=1) %>%
ungroup()
veg$date.x <- ymd(veg$date.x)
View(veg)
veg_filtered <- veg %>% filter(grepl("Live", plantStatus)) %>%
filter(!grepl("\\d\\d\\d\\d\\d[A-Z]", individualID)) %>%
filter(!is.na(height)) %>%
filter(!is.na(taxonID)) %>%
filter(!is.na(adjNorthing)) %>%
filter(!is.na(date.x)) %>%
filter(height > 2) %>%
# filter(date.x < ymd("2021-01-01")) %>%
#select(plotID, individualID, adjEasting, adjNorthing, taxonID, height, stemDiameter ninetyCrownDiameter, canopyPosition, adjCoordinateUncertainty, utmZone) %>%
rename("easting_tree" = adjEasting, "northing_tree" = adjNorthing) %>%
arrange(-height) %>%
group_by(individualID) %>%
slice_head(n=1) %>%
ungroup() %>%
left_join(plot_locs, by="plotID", keep=FALSE)
write.csv(veg_filtered,'neon_trees_BART.csv')
veg_filtered <- veg %>% filter(grepl("Live", plantStatus)) %>%
filter(!grepl("\\d\\d\\d\\d\\d[A-Z]", individualID)) %>%
filter(!is.na(height)) %>%
filter(!is.na(taxonID)) %>%
filter(!is.na(adjNorthing)) %>%
filter(!is.na(date.x)) %>%
filter(height > 2) %>%
# filter(date.x < ymd("2021-01-01")) %>%
select(plotID, individualID, adjEasting, adjNorthing, taxonID, height, stemDiameter ninetyCrownDiameter, canopyPosition, adjCoordinateUncertainty, utmZone) %>%
veg_filtered <- veg %>% filter(grepl("Live", plantStatus)) %>%
filter(!grepl("\\d\\d\\d\\d\\d[A-Z]", individualID)) %>%
filter(!is.na(height)) %>%
filter(!is.na(taxonID)) %>%
filter(!is.na(adjNorthing)) %>%
filter(!is.na(date.x)) %>%
filter(height > 2) %>%
# filter(date.x < ymd("2021-01-01")) %>%
select(plotID, individualID, adjEasting, adjNorthing, taxonID, height, stemDiameter, ninetyCrownDiameter, canopyPosition, adjCoordinateUncertainty, utmZone) %>%
rename("easting_tree" = adjEasting, "northing_tree" = adjNorthing) %>%
arrange(-height) %>%
group_by(individualID) %>%
slice_head(n=1) %>%
ungroup() %>%
left_join(plot_locs, by="plotID", keep=FALSE)
veg_filtered <- veg %>% filter(grepl("Live", plantStatus)) %>%
filter(!grepl("\\d\\d\\d\\d\\d[A-Z]", individualID)) %>%
filter(!is.na(height)) %>%
filter(!is.na(taxonID)) %>%
filter(!is.na(adjNorthing)) %>%
filter(!is.na(date.x)) %>%
filter(height > 2) %>%
# filter(date.x < ymd("2021-01-01")) %>%
dplyr::select(plotID, individualID, adjEasting, adjNorthing, taxonID, height, stemDiameter, ninetyCrownDiameter, canopyPosition, adjCoordinateUncertainty, utmZone) %>%
rename("easting_tree" = adjEasting, "northing_tree" = adjNorthing) %>%
arrange(-height) %>%
group_by(individualID) %>%
slice_head(n=1) %>%
ungroup() %>%
left_join(plot_locs, by="plotID", keep=FALSE)
write.csv(veg_filtered,here('output','BART','neon_trees_BART.csv'))
